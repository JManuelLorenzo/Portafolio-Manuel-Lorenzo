• especificación en lenguaje natural,
• pre y post condiciones,
• seudocódigo y
• especificación de casos de prueba.
• Analiza detalladamente el orden del tiempo de ejecución de estos algoritmos.

La union como tal es una operacion de conjutos donde se obtienen todos elementos entre dos conjuntos, sin importar
la importar presencia de uno en el otro. Lo que se me ocurrer hacer es recorrer ambos a la vez a través iterar el más
pequeño hasta su final. Como los elementos ya estar ordenados si son iguales añado unicamente uno. Y si son diferentes
comparo y añado el más pequeño primero y luego el más grande  pero hay un caso borde( lo explicare despues) se debe terminar
de iterar la lista grande y añadir eso a la nueva lista.

precondiciones:
Los conjuntos entrantes deben estar ordenados.
Deben ser estar construidos en estructura de datos linked list o similar que permita la utilización de nodos.
No puede estar en Array list.
Los elementos no deben repetirse.

Postcondiciones:
No importa si un elemento queda desordenado
No deben repetirse los elementos.

Casos de prueba:
Existen varios casos bordes, probe varios casos:
Igual:
A{1,2} B{1,2} > C{1,2}
Diferentes:
A{1, 3, 4} B{1, 5, 6} > C{1, 3, 5, 4, 6}  No se repiten.
A{1} B{2} > C{1,2}



Pseudocódigo:

ConjuntoA y ConjuntoB.
COMIENZO

conjuntoC <- Un conjunto Vacio.
SI cantidad de elementos de conjuntoA  >= cantidad de elementos de conjuntoB  ENTONCES
    conjuntoMenor <- conjuntoB
    conjuntoMayor <- conjuntoA
SINO
    conjuntoMenor <- conjuntoA
    conjuntoMayor <- conjuntoB
nodoMayor <- conjuntoMayor Buscar el nodo cabeza.
nodoMenor <- conjuntoMenor Buscar el nodo  cabeza.

MIENTRAS (nodoMenor <> null) ENTONCES // O(n)
    SI nodoMayor Dato == nodoMenor Dato ENTONCES
        SI conjuntoC buscar nodoMayor clave == null  ENTONCES
           conjuntoC insertar nodoMayor // Son iguales

    SINO

       SI nodoMayor Dato > nodoMenor Dato ENTONCES
            SI conjuntoC buscar nodoMenor clave == null ENTONCES // (O
                conjuntoC insertar nodoMenor

            SI conjuntoC buscar nodoMayor clave == null  ENTONCES
                conjuntoC Insertar nodoMayor


       SINO
             SI conjuntoC buscar nodoMayor clave == null  ENTONCES
                conjuntoC insertar nodoMayor

             SI conjuntoC buscar nodoMenor clave == null ENTONCES
                conjuntoC insertar nodoMenor


    nodoMayor <- nodoMayor getSiguiente
    nodoMenor <- nodoMenor getSiguiente
    Mientras nodoMayor <> null ENTONCES
        SI conjuntoC buscar nodoMayor clave == null ENTONCES
         conjuntoC insertar nodoMayor
    nodoMayor <- nodoMayor getSiguiente

retornar conjuntoC
FIN

Analisis de Orden:
el orden  O(n*(n+m)) que por lo tanto es O(n^2) O sea cuadratica. Seria mucho más
optimo con "hashtable" pero no lo hemos aprendido.